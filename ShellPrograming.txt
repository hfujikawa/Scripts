図解でわかるLinuxシェルスクリプト・正規表現
P.128 バッククォートとコマンド置換
バッククォート：バッククォート内の文字列は＄、｀、￥の直前の￥の３つだけが特殊な意味を持つ文字と
して認識される。置換後の文字列内に改行コードを含む場合は、それを取り除いて返される。
　　　　$ echo `cal 05 2006`
＄（）：バッククォートとの相違点は文字列内のバックスラッシュによる特殊文字のエスケープは機能するものの、
￥を含むすべての文字が特殊な意味を失う。ダブルクォートで囲むと、改行コードはそのまま。
　　　　$ echo "$(cal 05 2006)"


https://shellscript.sunone.me/variable.html
UNIX & Linux コマンド・シェルスクリプト リファレンス

変数の値を他の変数へ設定する
VAR="$VAR1"

変数 VAR に変数 VAR2 と変数 VAR3 の値を結合した値を設定
VAR="${VAR2}${VAR3}"

変数の値を参照する場合は変数名の頭に $ を付ける。参照する変数を明確にする場合は {} (中括弧) で変数名を囲む。
変数を {} で囲むことはシェルスクリプトの可読性を高めることにも有効である。
「${foo}${bar}」のように複数の変数を同時に参照する場合などは、{} を使用した方が個々の変数を区別しやすくなる。


https://sousaku-memo.net/php-system/1817
シェルスクリプトを高級言語のような書き味に近づける Tips 集

set -Ceuo pipefail
cd "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"


https://teratail.com/questions/138861
VAR = `ls hoge 2>&1 >/dev/null`

2>&1 は、標準エラー出力を標準出力にリダイレクトする、という解釈だが、厳密には
標準エラー出力を、標準出力の複製にリダイレクトする、
ので、この時点で標準出力が二つ（オリジナルと複製したものと)になる。
その後で >/dev/null で、標準出力（のオリジナル）を、/dev/null にリダイレクトするので、結果的に
・標準出力は表示されない（/dev/null 行き）
・標準エラー出力は（複製された）標準出力に入る（＝ VAR に格納される）
となる。


http://doi-t.hatenablog.com/entry/2015/03/29/225239
Linuxターミナル、コマンドtips その3: stdin, stderr, stdout, リダイレクト, パイプ

1) stdoutとstderrを１つのファイルにマージする
command > output-stdout-stderr 2>&1

2) stdoutとstderrを両方とも捨てる
command > /dev/null 2>&1
->(command 1> /dev/null 2>&1)

3) stdoutは捨てて、stderrをstdoutとして出力する
command 2>&1 > /dev/null
->(command 2>&1 1> /dev/null)


https://qiita.com/ritukiii/items/b3d91e97b71ecd41d4ea
いい加減覚えよう。 `command > /dev/null 2>&1`の意味

・2>&1
　　標準エラー出力の結果を標準出力にマージする
・> /dev/null
　　標準出力を捨てる

つまり、このコマンドの意味は、
標準エラー出力の結果を標準出力にマージして、/dev/nullに捨てる
という事だったわけです。
